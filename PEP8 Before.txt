Check results
=============

W291:6:27:trailing whitespace
E265:7:1:block comment should start with '# '
E261:8:26:at least two spaces before inline comment
E262:8:27:inline comment should start with '# '
E265:9:1:block comment should start with '# '
E302:13:1:expected 2 blank lines, found 1
E265:14:5:block comment should start with '# '
E265:16:9:block comment should start with '# '
E261:17:22:at least two spaces before inline comment
E262:17:23:inline comment should start with '# '
E261:18:36:at least two spaces before inline comment
E262:18:37:inline comment should start with '# '
E261:20:47:at least two spaces before inline comment
E262:20:48:inline comment should start with '# '
W291:20:69:trailing whitespace
E265:22:9:block comment should start with '# '
E501:23:80:line too long (87 > 79 characters)
E261:27:24:at least two spaces before inline comment
E262:27:25:inline comment should start with '# '
E261:28:38:at least two spaces before inline comment
E262:28:39:inline comment should start with '# '
E261:30:49:at least two spaces before inline comment
E262:30:50:inline comment should start with '# '
W291:30:71:trailing whitespace
E265:32:9:block comment should start with '# '
E501:33:80:line too long (89 > 79 characters)
E265:36:1:block comment should start with '# '
E265:38:1:block comment should start with '# '
E501:39:80:line too long (98 > 79 characters)
E265:40:1:block comment should start with '# '
E265:42:1:block comment should start with '# '
E265:44:1:block comment should start with '# '
E302:48:1:expected 2 blank lines, found 1
W291:50:67:trailing whitespace
E231:55:20:missing whitespace after ','
E501:60:80:line too long (81 > 79 characters)
E261:65:21:at least two spaces before inline comment
E261:66:61:at least two spaces before inline comment
E262:66:62:inline comment should start with '# '
E501:66:80:line too long (104 > 79 characters)
E261:70:44:at least two spaces before inline comment
E262:70:45:inline comment should start with '# '
E501:70:80:line too long (87 > 79 characters)
E261:71:22:at least two spaces before inline comment
E261:73:28:at least two spaces before inline comment
E261:74:39:at least two spaces before inline comment
W291:74:79:trailing whitespace
E261:75:10:at least two spaces before inline comment
E261:77:24:at least two spaces before inline comment
E261:78:30:at least two spaces before inline comment
E261:79:20:at least two spaces before inline comment
W293:81:1:blank line contains whitespace
E303:83:1:too many blank lines (3)
E302:84:1:expected 2 blank lines, found 3
E265:85:5:block comment should start with '# '
W291:85:24:trailing whitespace
E261:87:54:at least two spaces before inline comment
E262:87:55:inline comment should start with '# '
E261:91:54:at least two spaces before inline comment
E262:91:55:inline comment should start with '# '
E302:95:1:expected 2 blank lines, found 1
W291:95:21:trailing whitespace
E265:96:5:block comment should start with '# '
W291:96:24:trailing whitespace
E261:98:54:at least two spaces before inline comment
E262:98:55:inline comment should start with '# '
E261:102:54:at least two spaces before inline comment
E262:102:55:inline comment should start with '# '
E261:106:52:at least two spaces before inline comment
E262:106:53:inline comment should start with '# '
E261:110:56:at least two spaces before inline comment
E262:110:57:inline comment should start with '# '
E261:114:56:at least two spaces before inline comment
E262:114:57:inline comment should start with '# '
E302:118:1:expected 2 blank lines, found 1
E231:124:21:missing whitespace after ','
E231:125:45:missing whitespace after ','
E231:125:63:missing whitespace after ','
E501:125:80:line too long (91 > 79 characters)
E231:132:25:missing whitespace after ','
E231:132:28:missing whitespace after ','
E261:132:69:at least two spaces before inline comment
E501:132:80:line too long (94 > 79 characters)
E231:134:21:missing whitespace after ','
E261:134:32:at least two spaces before inline comment
E262:134:33:inline comment should start with '# '
E231:135:33:missing whitespace after ','
E231:135:55:missing whitespace after ','
E501:135:80:line too long (94 > 79 characters)
E501:136:80:line too long (130 > 79 characters)
W291:137:58:trailing whitespace
E501:140:80:line too long (85 > 79 characters)
W291:140:86:trailing whitespace
E302:143:1:expected 2 blank lines, found 1
E265:144:5:block comment should start with '# '
E261:148:43:at least two spaces before inline comment
E501:148:80:line too long (94 > 79 characters)
E501:150:80:line too long (90 > 79 characters)
E501:151:80:line too long (179 > 79 characters)
E261:151:106:at least two spaces before inline comment
E261:153:36:at least two spaces before inline comment
E261:155:32:at least two spaces before inline comment
E501:155:80:line too long (133 > 79 characters)
E261:157:33:at least two spaces before inline comment
E128:160:9:continuation line under-indented for visual indent
E128:161:9:continuation line under-indented for visual indent
E501:161:80:line too long (155 > 79 characters)
E261:161:118:at least two spaces before inline comment
E231:168:53:missing whitespace after ','
E261:170:12:at least two spaces before inline comment
E261:172:33:at least two spaces before inline comment
E231:174:50:missing whitespace after ','
E261:180:61:at least two spaces before inline comment
E501:180:80:line too long (86 > 79 characters)
E261:187:43:at least two spaces before inline comment
E501:187:80:line too long (87 > 79 characters)
E261:188:21:at least two spaces before inline comment
W291:192:63:trailing whitespace
E261:194:19:at least two spaces before inline comment
E262:194:20:inline comment should start with '# '
W291:194:46:trailing whitespace
E261:195:23:at least two spaces before inline comment
E261:200:19:at least two spaces before inline comment
E262:200:20:inline comment should start with '# '
W291:200:46:trailing whitespace
E302:203:1:expected 2 blank lines, found 1
E261:204:61:at least two spaces before inline comment
E262:204:62:inline comment should start with '# '
E501:204:80:line too long (85 > 79 characters)
E261:208:43:at least two spaces before inline comment
E501:208:80:line too long (87 > 79 characters)
E261:209:21:at least two spaces before inline comment
E501:209:80:line too long (98 > 79 characters)
E261:214:15:at least two spaces before inline comment
E261:215:23:at least two spaces before inline comment
E501:215:80:line too long (92 > 79 characters)
E261:220:19:at least two spaces before inline comment
W291:223:16:trailing whitespace
E261:235:29:at least two spaces before inline comment

Code
=============
# D's Nuts Bot program

# Libraries
import sys
import random
from random import randint 
#My Libraries
from validations import * #Import Validation functions
#Constants
LOW = 1
HIGH = 2

class readFromFiles:
    #Lists read from files
    try:
        #if it can open, continue code
        nuts = list() #list for total nuts
        with open("nuts.txt") as x: #open nuts.txt and import as list
            for line in x:
                nuts.append(line.rstrip('\n')) #strips \n from entry 
    except IOError:
        #if file isnt found then end
        print("The File > nuts.txt < doesn't exist! Please doublecheck and try again.")
        exit()

    try:
        prices = list() #list for all prices
        with open("prices.txt") as x: #open prices.txt and import as list
            for line in x:
                prices.append(line.rstrip('\n')) #strips \n from entry 
    except IOError:
        #if file isnt found then end
        print("The File > prices.txt < doesn't exist! Please doublecheck and try again.")
        exit()

#Call variables from classes
newReader = readFromFiles
#List of random names
names = ["Jack", "Rachel", "Michelle", "Aaron", "Samuel", "An", "Julie", "Jerry", "Jace", "Sofia"]
#list to store ordered nutss
order_list = []
#list to store nuts prices
order_cost = []
#Customer details dictionary
customer_details = {}

# Welcome message with random name
def welcome():
    '''
    Purpose: To generate a random name from the list and print out 
    a welcome message
    Parameters: None
    Returns: None
    '''
    num = randint(0,9)
    name = (names[num])
    # prints (formatted) welcome message
    print("*** Welcome to D's Nuts! ***")
    print("*** My name is {} ***".format(name))
    print("*** I will be here to help you order your delicious organic nuts ***")


# Menu for delivery or click and collect
def order_type():
    del_collect = "" # sets del_collect default to blank string
    question = (f"Enter a number between {LOW} and {HIGH} ") #asks for input(int) - between LOW and HIGH
    print ("Is your order for click and collect or delivery?")
    print("(1) Click and Collect")
    print("(2) Delivery")
    delivery = val_int(LOW, HIGH, question) #takes LOW, HIGH, and question as parameter
    if delivery == 1: # If (1) click and collect chosen...
        print("Click and Collect")
        click_and_collect() # calls click and collect information function
        del_pick = "Click and Collect" # sets del_collect to click and collect 
    else: # if (2) delivery chosen...
        print("Delivery")
        delivery_info() # calls delivery information function
        del_pick = "Delivery" # sets del_collect to delivery
    return del_pick # returns del_pick back to main() function

    

# Click and collect information - name and phone number
def click_and_collect():
    #Basic Instructions 
    question = ("Please enter your name ")
    customer_details["name"] = valid_string(question) #asks for input(string)
    print(customer_details["name"])

    question = ("Please enter your phone number ")
    customer_details['phone'] = valid_phone(question) #asks for input(integer)
    print(customer_details["phone"])

# Delivery information - name, phone number and address
def delivery_info(): 
    #Basic Instructions 
    question = ("Please enter your name ")
    customer_details["name"] = valid_string(question) #asks for input(string)
    print(customer_details["name"])

    question = ("Please enter your phone number ")
    customer_details['phone'] = valid_phone(question) #asks for input(integer)
    print(customer_details["phone"])

    question = ("Please enter your house number ")
    customer_details['house'] = val_house(question) #asks for input(integer)
    print(customer_details["house"])

    question = ("Please enter your street name ")
    customer_details['street'] = valid_string(question) #asks for input(string)
    print(customer_details["street"])

    question = ("Please enter your suburb ")
    customer_details['suburb'] = valid_string(question) #asks for input(string)
    print(customer_details["suburb"])

# Nuts menu
def menu():
    # Title
    print("-"*60)
    print("Nuts Options Today:")
    print("-"*60)
    # Formatting menu (names and prices)
    for x in range(0,len(newReader.nuts)):
        print("({}) {} - ${:.2f}".format(x+1,newReader.nuts[x],float(newReader.prices[x])))
    print("-"*60)


# Choose total number of items - max 12
# Nuts order - from menu - print each nut ordered with cast
def order_nuts():
    num_nuts = val_int(1,12,"How many nuts would you like (1-12)? ") # asks for input(integer)
    print("Please select {} nut(s).".format(num_nuts))
    for x in range(0,num_nuts): #takes 0 and num_nuts as parameter
        nuts_ordered = val_int(1,(len(newReader.nuts)),("Please select nut {}: ".format(x+1)))
        print("Added {} (${:.2f}) to your order.".format(newReader.nuts[nuts_ordered-1], float(newReader.prices[nuts_ordered-1])))
        order_list.append(newReader.nuts[nuts_ordered-1]) 
        order_cost.append(float(newReader.prices[nuts_ordered-1]))

# Print order out - including if the order is delivery or click and collect and names 
# and price of each nut - total cost including any delivery charge
# takes del_collect as parameter
def print_order(del_collect):
    #Format Customer Details
    print("-"*60)
    print("Customer Details:")
    print("-"*60)
    if del_collect == "Click and Collect": # If click and collect, print you will recieve text
        print("Your order is for Click and Collect")
        print("You will recieve a text message when your nuts are ready to be picked up.")
        print(f"Customer Name: {customer_details['name']} \nCustomer Phone: {customer_details['phone']}") # Format to print customer click and collect details personal information
        print("-"*60)
    elif del_collect == "Delivery": # if delivery, run below
        # Handle delivery
        if len(order_list) < 5: # if less than 5 nuts ordered, delivery fee charged, but 5 or more ordered is free of delivery charge
            print("An extra $9.00 will be added for delivery.")
            order_cost.append(9) # adds $9 to charge if ordered 4 or less nuts
        print("Your order is for Delivery")
        print(f"Customer Name: {customer_details['name']}"
        f"\nCustomer Phone: {customer_details['phone']}"
        f"\nCustomer Address: {customer_details['house']} {customer_details['street']} {customer_details['suburb']}") # prints delivery details/information
        print("-"*60)
    print("Your Order Details:")
    print("-"*60)
    count = 0
    # print ordered items
    for item in order_list:
        print("Ordered: {} Cost ${:.2f}".format(item,float(order_cost[count])))
        count = count+1
    print() # print empty line/space
    # Calculate Total Cost
    total_cost = sum(order_cost) # takes order_cost as parameter
    # Print Total Cost (formatted)
    print("Total Cost: ${:.2f}".format(total_cost,2))
    print("-"*60)


# Ability to cancel or proceed with order
def confirm_cancel():
    question = (f"Enter a number between {LOW} and {HIGH} ") # asks for input(integer)
    print("-"*60)
    print ("Please confirm your order - Choose: ")
    print("(1) To Confirm")
    print("(2) To Cancel")
    print("Please enter a number ")

    confirm = val_int(LOW, HIGH, question) # takes LOW, HIGH, and question as parameter
    if confirm == 1: # if order is confirmed (1) prints order confirmed
        print("-"*60)
        print("Order Confirmed")
        print("Your order is getting picked and packed.")
        print("Your delicious nuts will be with you shortly.")  
        print("-"*60)
        new_exit() #calls new_exit() function 
    elif confirm == 2: # if order is cancelled (2) prints order cancelled
        print("-"*60)
        print("Your Order has been Cancelled")
        print("-"*60)
        print("You can restart your order or exit the BOT")
        new_exit() #calls new_exit() function 

# Option for new order or to exit
def new_exit():
    question = (f"Enter a number between {LOW} and {HIGH} ") #asks for input(integer)
    print ("Do you want to start another order or exit? Choose: ")
    print("(1) To start another order")
    print("(2) To exit the BOT ")
    confirm = val_int(LOW, HIGH, question) # takes LOW, HIGH, and question as parameter
    if confirm == 1: # if confirm (1), prints New Order and clears all temporary lists and details
        print("New Order")
        order_list.clear()
        order_cost.clear()
        customer_details.clear()
        main() # calls main() function
    elif confirm == 2: # if exit (2), prints Exit and clears all temporary lists and details
        print("Exit")
        order_list.clear()
        order_cost.clear()
        customer_details.clear()
        sys.exit() # exits and stops system


# Main function 
def main():
    '''
    Purpose: To run all functions
    Parameters: None
    Returns: None
    '''
    welcome()
    del_collect = order_type()
    print(del_collect)
    menu()
    order_nuts()
    print_order(del_collect) # takes del_collect as parameter
    confirm_cancel()
    new_exit()

main()

# instructions not clear i got confused lol
